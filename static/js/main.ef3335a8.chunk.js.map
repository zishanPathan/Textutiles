{"version":3,"sources":["components/About.js","components/Nevbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","backgroundColor","color","_useState2","_slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","React","createElement","className","style","align","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Nevbar","props","concat","mode","Link","to","title","aria-label","aria-current","toggleMode","role","htmlFor","TextForm","text","setText","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","Alert","alert","class","word","lower","charAt","slice","capitialize","msg","App","setMode","setAlert","message","setTimeout","Fragment","Router","document","body","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ef3335a8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle,setMyStyle] = useState({\r\n      backgroundColor:'white',\r\n      color:'black'\r\n    })\r\n    const [btnText, setBtnText] = useState('Enable Dark Mode')\r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color == 'black'){\r\n            setMyStyle({\r\n              backgroundColor:'black',\r\n              color:'white'\r\n            })\r\n            setBtnText('Enable Light Mode')\r\n        }else{\r\n            setMyStyle({\r\n                backgroundColor:'white',\r\n                color:'black'\r\n            })\r\n            setBtnText('Enable Dark Mode')\r\n        }\r\n}\r\n    \r\n  return (\r\n    <div className=\"container\"style={myStyle} >\r\n        <h1 align=\"center\">About us</h1>\r\n    <div style={myStyle}>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\"style={myStyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\"style={myStyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"style={myStyle}>\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\"style={myStyle}>\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"style={myStyle}>\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<button className='btn btn-primary my-3'onClick={toggleStyle}>{btnText}</button>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Nevbar(props) {\r\n    return (\r\n      <div>\r\n           <nav className={`navbar navbar-expand-lg  navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/About\">About</Link>\r\n        </li>\r\n      </ul>\r\n       <div className=\"form-check form-switch\">\r\n       <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n       <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color:props.mode==='light'?'black':'white'}}>Enable Dark Mode</label>\r\n       </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\nNevbar.defaultProps = {\r\n    title:\"project\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpCase =()=>{\r\n    let newText = text.toUpperCase()\r\n    setText(newText)\r\n    props.showAlert('converted to uppercase', 'success')\r\n  }\r\n  const handleLoCase =()=>{\r\n    let newText = text.toLowerCase()\r\n    setText(newText)\r\n    props.showAlert('converted to lowercase', 'success')\r\n\r\n  }\r\n  const handleClearCase =()=>{\r\n    let newText = ' '\r\n    setText(newText)\r\n  }\r\n\r\n  const handleOnChange =(event)=>{\r\n    setText(event.target.value)\r\n\r\n  }\r\n  const [text, setText] = useState(\"\")\r\n  return (\r\n    <div className=\"container\">\r\n    <div>\r\n  <div className=\"mb-3\">\r\n    <h1 style={{color:props.mode ==='light'? 'black':'white'}}>Enter text for analyze</h1>\r\n    <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} \r\n   style={{backgroundColor:props.mode ==='light'? 'white':'#394349' , color:props.mode === 'dark'?'white':'black'}} rows=\"8\"></textarea>\r\n  </div>\r\n  <div className=\"container\"  style={{color: props.mode === 'light'?'black':'white'}}>\r\n  <button type='button' className='btn btn-primary  'onClick={handleUpCase} > UpperCase</button> \r\n  <button type='button' className='btn btn-primary'onClick={handleLoCase}> LowerCase</button> \r\n  <button type='button' className='btn btn-primary'onClick={handleClearCase}>Clear</button> \r\n    <h2>Your text summery</h2>\r\n    <p>{text.split(' ').length-1} words and {text.length} characters</p>\r\n    <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text :\"Enter something to preview it here\"}</p>\r\n  </div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitialize =(word)=>{\r\n        let lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n  return (\r\n      props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{ capitialize(props.alert.type)}</strong>: {props.alert.msg} \r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import { useState } from 'react';\nimport React from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Nevbar from './components/Nevbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    },1500)\n  }\n  const toggleMode =()=>{\n    if(mode==='light'){\n      setMode('dark') \n      document.body.style.backgroundColor = '#0D2B3A'\n      showAlert('dark mode enabled','success')\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert('light mode enabled','success')\n    }\n  }\n  return (\n    <>\n   <Router>\n      <Nevbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>  \n      <div className=\"container my-3\">\n        <Routes>   \n          <Route path=\"/about\" element={<About/>} />\n          <Route path=\"/\" element={<TextForm mode={mode} showAlert={showAlert}/>} />\n        </Routes>\n      </div>\n   </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}